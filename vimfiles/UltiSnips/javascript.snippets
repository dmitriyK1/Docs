snippet l "console.log"
console.log($1);$0
endsnippet
# ----------------------------------------
snippet re "return"
return $1;$0
endsnippet
# ----------------------------------------
snippet sw "switch"
switch ($1) {
	case $2:
		$3
	break;$4
}$0
endsnippet
# ----------------------------------------
snippet fn "Function"
function $1($2) {
	$3
}$0
endsnippet
# ----------------------------------------
snippet v "Variable"
var $1 = $2;$0
endsnippet
# ----------------------------------------
snippet c "Constant"
const $1 = $2;$0
endsnippet
# ----------------------------------------
snippet le "let"
let $1 = $2;$0
endsnippet
# ----------------------------------------
snippet cl "Class"
class $1 {
	$0
}
endsnippet
# ----------------------------------------
snippet ce "Class+extends"
class $1 extends $2 {
	$0
}
endsnippet
# ----------------------------------------
snippet a "alert"
alert($1);$0
endsnippet
# ----------------------------------------
snippet i "import"
import $1 from "$2";$0
endsnippet
# ----------------------------------------
snippet in "named import"
import { $1 } from "$2";$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.(return|ret|rt)" "Return (postfix)" r
return `!p snip.rv = match.group(1)`;$0
endsnippet
# ----------------------------------------
snippet "(\w+).par" "Parenthesis (postfix)" r
(`!p snip.rv = match.group(1)`$1)$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.(log|lg|l)" "console.log (postfix)" r
console.log(`!p snip.rv = match.group(1)`);$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.info" "console.info (postfix)" r
console.info(`!p snip.rv = match.group(1)`);$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.debug" "console.debug (postfix)" r
console.debug(`!p snip.rv = match.group(1)`);$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.(error|err)" "console.error (postfix)" r
console.error(`!p snip.rv = match.group(1)`);$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.warn" "console.warn (postfix)" r
console.warn(`!p snip.rv = match.group(1)`);$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.(dir|d)" "console.dir (postfix)" r
console.dir(`!p snip.rv = match.group(1)`);$0
endsnippet
# ----------------------------------------
snippet ed "export (default)"
export default $0
endsnippet
# ----------------------------------------
snippet en "export (named)"
export { $0 };
endsnippet
# ----------------------------------------
snippet e "export"
export $0
endsnippet
# ----------------------------------------
snippet si
setInterval(function() {
	$1
}, $0);
endsnippet
# ----------------------------------------
snippet st
setTimeout(function() {
	$1
}, $2);$0
endsnippet
# ----------------------------------------
snippet st6
setTimeout(() => {
	$1
}, $2);$0
endsnippet
# ----------------------------------------
snippet "([^\s].*)\.fun" "function (postfix)" r
function $1($2) {
	`!p snip.rv = match.group(1)`$3
}$0
endsnippet
# ----------------------------------------
snippet fe " function expression"
function$1($2) {
	$3
};$0
endsnippet
# ----------------------------------------
snippet af "arrow function"
($1) => $0
endsnippet
# ----------------------------------------
snippet ab "arrow function (block)"
($1) => {
	$2
}$0
endsnippet
# ----------------------------------------
snippet rr "render method"
render($1) {
	$2
}$0
endsnippet
# ----------------------------------------
snippet scu "shouldComponentUpdate"
shouldComponentUpdate($1) {
	$2
}$0
endsnippet
# ----------------------------------------
snippet cdm "componentDidMount"
componentDidMount($1) {
	$2
}$0
endsnippet
# ----------------------------------------
snippet r "return"
return$0
endsnippet
# ----------------------------------------
snippet cr "class constructor"
constructor($1) {
	$2
}$0
endsnippet
# ----------------------------------------
snippet wh "while"
while ($1) {
	$2
}$0
endsnippet
# ----------------------------------------
snippet if "if"
if ($1) {
	$2
}$0
endsnippet
# ----------------------------------------
snippet ife "if-else"
if ($1) {
	$2
} else {
	$3
}$0
endsnippet
# ----------------------------------------
snippet th "throw an Error"
throw new Error($1);$0
endsnippet
# ----------------------------------------
snippet gn "generator function"
function* $1($2) {
	$3
}$4
endsnippet
# ----------------------------------------
snippet esl "eslint-disable-line"
// eslint-disable-line$1
endsnippet
# TODO: add  https://orktes.github.io/atom-react/#snippets-list
